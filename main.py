import os
import logging
import discord
from discord.ext import tasks
from dotenv import load_dotenv
import aiohttp
from aiohttp import web
import asyncio

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("Bot")

load_dotenv()
TOKEN = os.getenv("TOKEN")
VOICE_CHANNEL_ID = int(os.getenv("VOICE_CHANNEL_ID", "0"))

if not TOKEN:
    logger.critical("‚ùå Discord TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    exit(1)
if not VOICE_CHANNEL_ID:
    logger.critical("‚ùå VOICE_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
    exit(1)

intents = discord.Intents.default()
intents.guilds = True
intents.voice_states = True

bot = discord.Client(intents=intents)
voice_client = None

@tasks.loop(minutes=10)
async def keep_alive():
    global voice_client
    try:
        channel = bot.get_channel(VOICE_CHANNEL_ID)
        if not isinstance(channel, discord.VoiceChannel):
            logger.error("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ voice_client: {voice_client}, –ø–æ–¥–∫–ª—é—á—ë–Ω: {voice_client.is_connected() if voice_client else False}")
        
        if voice_client and voice_client.is_connected():
            logger.info(f"üîÑ –£–∂–µ –≤ –∫–∞–Ω–∞–ª–µ {channel.name}")
            return
        
        if voice_client:
            try:
                await voice_client.disconnect(force=True)
                logger.info("üîå –û—Ç–∫–ª—é—á—ë–Ω —Å—Ç–∞—Ä—ã–π voice_client")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ voice_client: {e}")
            voice_client = None

        voice_client = await channel.connect(reconnect=True)
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ {channel.name}")
    except discord.errors.ConnectionClosed as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)
        voice_client = None
        await keep_alive()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

@bot.event
async def on_ready():
    logger.info(f"‚úÖ –ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤")
    if not keep_alive.is_running():
        keep_alive.start()

async def handle_keepalive(request):
    return web.Response(text="Bot is alive!")

async def start_server():
    app = web.Application()
    app.router.add_get('/', handle_keepalive)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv('PORT', 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"üîÑ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

async def main():
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
            bot.session = session
            await asyncio.gather(
                start_server(),
                bot.start(TOKEN)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())